#!/bin/bash

set -euo pipefail

# --------------------------------- functions --------------------------------

build() {
    local build_dir
    local default_release_path
    local package
    local package_dir
    local release_path

    package="$1"; shift
    package_dir="${package%/*}"
    default_release_path=$(rez-config release_packages_path 2>/dev/null)
    release_path=$(awk '/release_path/ {print $3}' "$package" | tr -d \")
    [[ -z $release_path ]] && release_path=int

    cd "$package_dir"
    full_release_path="${default_release_path%/*}/$release_path"
    echo "$@"
    rez-build -cip "$full_release_path" "$@"
    build_dir="$package_dir/build"
    read -p "Remove '$build_dir'? " -r answer
    case "$answer" in
        y|yes|Y|YES) rm -rf "$build_dir";;
    esac
}

showerror() {
    echo "No file or the file doesn't exist: $1"
    exit 1
}

usage() {
    echo "usage: do-rez-build <command> [package.py]"
    echo
    echo "These are the commands you can use:"
    echo
    echo "    build   Builds the package from package.py"
    echo "    help    Show this help message"
    exit
}

error_usage() {
    echo "usage: do-rez-build <command> [package.py]"
    exit 1
}


# -------------------------------- delegation --------------------------------

# check if any arguments were passed
[[ -z $* ]] && error_usage
case "$1" in
    build)
        shift
        [[ -z $* ]] && error_usage
        package="$1"; shift
        [[ -f $package ]] || showerror "$package"
        build "$package" "$@"
        ;;
    help) usage;;
    *) error_usage;;
esac
