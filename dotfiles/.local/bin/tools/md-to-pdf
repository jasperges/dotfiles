#!/bin/bash

set -euo pipefail

# --------------------------------- functions --------------------------------

checkdeps() {
    # Check if all needed programs/scripts are available.
    local has_error
    local prog

    has_error=0
    for prog in absdir mmdc md-mermaid-label pandoc; do
        if ! command -v "$prog" &> /dev/null; then
            echo "'$prog' not found, can't run without it."
            has_error=1
        fi
    done
    [[ $has_error -eq 1 ]] && exit 1
    return 0
}

convert() {
    local basename
    local directory
    local inputfile
    local outputfile
    local intermediatebasename
    local intermediatefile
    local version

    inputfile="$1"
    version=$(getversion "$inputfile")
    directory=$(absdir "$inputfile")
    basename="${inputfile%.*}"
    filebase="${basename##*/}"
    intermediatebasename="${basename}-temp-$(uuidgen)"
    [[ -d $directory/_versions ]] && basename="${directory}/_versions/${filebase}"
    if [[ -n $version ]]; then
        outputfile="${basename}-${version}.pdf"
    else
        outputfile="${basename}.pdf"
    fi

    cd "$directory" || exit $?

    if grep -q '```mermaid' "$inputfile"; then
        intermediatefile="${intermediatebasename}.md"
        # default, forest, dark or neutral
        mmdc -q -c "$HOME/.config/mermaid/config.json" -i "$inputfile" -o "$intermediatefile"
        md-mermaid-label < "$intermediatefile" > "${intermediatefile}.temp"
        pandocconvert "${intermediatefile}.temp" "$outputfile"
        # Clean up intermediate files
        rm "$intermediatebasename"*
    else
        pandocconvert "$inputfile" "$outputfile"

    fi
}

getversion() {
    local versionline

    versionline=$(grep -oE "^version:\s+(&[A-Z]+)?\s+v?[0-9]+(\.[0-9]+)?(\.[0-9]+)?" "$1")
    if [[ $versionline =~ version:[[:space:]]+(&[A-Z]+)?[[:space:]]+(v?[0-9]+(\.[0-9]+)?(\.[0-9]+)?) ]]; then
        version="${BASH_REMATCH[2]}"
        echo "$version"
    fi
}

pandocconvert() {
    local inputfile
    local outputfile

    inputfile="$1"
    outputfile="$2"
    pandoc "$inputfile" -f markdown -o "$outputfile" --template eisvogel \
        --filter pandoc-latex-environment --pdf-engine xelatex
}

showerror() {
    echo "No file or the file doesn't exist: $1"
    exit 1
}

usage() {
    echo "usage: md-to-pdf [markdownfile.md]"
    echo
    echo "It will convert to markdown file to a pdf file with the same "
    echo "basename. If mermaid graphs are detected, they are made into .svg "
    echo "images and will be included in the pdf. The temporary files will "
    echo "be deleted at the end."
    exit
}

error_usage() {
    echo "usage: md-to-pdf [markdownfile.md]"
    exit 1
}

# -------------------------------- delegation --------------------------------

# check if any arguments were passed
[[ -z $* ]] && error_usage
case "$1" in
    help) usage ;;
    *)
        if [[ -f "$1" ]]; then
            checkdeps && convert "$1" && exit
        else
            showerror "$1"
        fi
        ;;
esac
