#!/bin/bash

set -euo pipefail

# --------------------------------- functions --------------------------------

checkdeps() {
    # Check if all needed programs/scripts are available.
    local has_error
    local prog

    has_error=0
    for prog in entr md-to-pdf zathura; do
        if ! command -v "$prog" &> /dev/null; then
            echo "'$prog' not found, can't run without it."
            has_error=1
        fi
    done
    [[ $has_error -eq 1 ]] && exit 1
    return 0
}

preview() {
    local basename
    local directory
    local entrpid
    local inputfile
    local outputfile
    local timeout
    local timepassed
    local version

    timeout=60
    inputfile="$1"
    version=$(getversion "$inputfile")
    directory=$(absdir "$inputfile")
    basename="${inputfile%.*}"
    filebase="${basename##*/}"
    [[ -d $directory/_versions ]] && basename="${directory}/_versions/${filebase}"
    if [[ -n $version ]]; then
        outputfile="${basename}-${version}.pdf"
    else
        outputfile="${basename}.pdf"
    fi
    if [[ -f $outputfile ]]; then
        entr -np md-to-pdf /_ <<< "$inputfile" &
    else
        entr -n md-to-pdf /_ <<< "$inputfile" &
    fi
    entrpid="$!"

    timepassed=0
    while [[ ! -f $outputfile && $timepassed -lt $timeout ]]; do
        sleep 2
        timepassed=$((timepassed + 2))
    done
    if [[ $timepassed -ge $timeout ]]; then
        echo "Timeout while waiting for pdf file..."
        exit 1
    fi
    zathura "$outputfile"
    kill "$entrpid"
}

getversion() {
    local versionline

    versionline=$(grep -oE "^version:\s+(&[A-Z]+\s?)?v?[0-9]+(\.[0-9]+)?(\.[0-9]+)?" "$1")
    if [[ $versionline =~ version:[[:space:]]+(&[A-Z]+[[:space:]]?)?(v?[0-9]+(\.[0-9]+)?(\.[0-9]+)?) ]]; then
        version="${BASH_REMATCH[2]}"
        echo "$version"
    fi
}

showerror() {
    echo "No file or the file doesn't exist: $1"
    exit 1
}

usage() {
    echo "usage: md-pdf-preview [markdownfile.md]"
    echo
    echo "This will invoke 'entr' to watch for changes in the markdown file."
    echo "At first run and also when changes are detected the document is"
    echo "converted to pdf with 'md-to-pdf'. The generated pdf file is opened"
    echo "in the default pdf viewer."
    exit
}

error_usage() {
    echo "usage: md-to-pdf [markdownfile.md]"
    exit 1
}

# -------------------------------- delegation --------------------------------

# check if any arguments were passed
[[ -z $* ]] && error_usage
case "$1" in
    help) usage ;;
    *)
        if [[ -f "$1" ]]; then
            checkdeps && preview "$1" && exit
        else
            showerror "$1"
        fi
        ;;
esac
