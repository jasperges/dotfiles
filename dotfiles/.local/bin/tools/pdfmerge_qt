#!/usr/bin/env python3
# Script: pdfmerge_qt.py
# Version: 0.6 (now for Python 3, using PyPDF2)
# Author: Jasper van Nieuwenhuizen
# Description: a script for setting the first page of a pdf-file as the
#              background of the second pdf. Uses PySide and pyPdf.

import functools
# from PySide import QtGui, QtCore
import os
import sys
from os import path

from PyPDF2 import PdfFileReader, PdfFileWriter
os.environ['QT_API'] = 'pyside2'
from qtpy import QtCore, QtGui, QtWidgets


if sys.platform == 'darwin':
    BRIEFPAPIER_PATH = path.expanduser(
        "~/syncthing/linesofjasper/huisstijl/linesofjasper-briefpapier.pdf")
elif sys.platform == 'linux':
    BRIEFPAPIER_PATH = path.expanduser(
        "~/syncthing/linesofjasper/huisstijl/linesofjasper-briefpapier.pdf")
    if not os.path.isfile(BRIEFPAPIER_PATH):
        BRIEFPAPIER_PATH = path.expanduser(
            "~/Sync/linesofjasper/huisstijl/linesofjasper-briefpapier.pdf")
else:
    BRIEFPAPIER_PATH = None


class lineEdit(QtWidgets.QLineEdit):
    def __init__(self, title, parent):
        super(lineEdit, self).__init__(title, parent)
        self.setAcceptDrops(True)

    def dragEnterEvent(self, e):
        if e.mimeData().hasFormat("text/uri-list"):
            e.accept()
        else:
            e.ignore()

    def dropEvent(self, e):
        UrlList = e.mimeData().urls()
        if UrlList:
            f = UrlList[0].toLocalFile()
            if path.splitext(f)[-1].lower() == ".pdf":
                self.setText(f)


class mergePdfWin(QtWidgets.QWidget):
    def __init__(self):
        super(mergePdfWin, self).__init__()
        self.initUI()

    def initUI(self):
        label = QtWidgets.QLabel
        le = lineEdit
        pb = QtWidgets.QPushButton

        background1Label = label("Background pdf:")
        textLabel = label("Text pdf:")

        self.background1Edit = le(self.briefpapierPath(), self)
        self.textEdit = le("", self)

        self.browseButton1 = pb("...")
        self.browseButton2 = pb("...")
        self.browseButton1.setFixedWidth(50)
        self.browseButton2.setFixedWidth(50)
        saveButton = QtWidgets.QDialogButtonBox.Save
        closeButton = QtWidgets.QDialogButtonBox.Close
        buttonBox = QtWidgets.QDialogButtonBox()
        buttonBox.setStandardButtons(closeButton | saveButton)

        self.background1Edit.setToolTip("The pdf-file to use as the background.")
        self.textEdit.setToolTip("The pdf-file containing the 'normal' content (e.g. text).")
        self.browseButton1.setToolTip("Browse your system for the file.")
        self.browseButton2.setToolTip("Browse your system for the file.")

        self.browseButton1.clicked.connect(
            functools.partial(self.browseOpen, self.homepath(), self.browseButton1))
        self.browseButton2.clicked.connect(
            functools.partial(self.browseOpen, self.homepath(), self.browseButton2))
        buttonBox.button(closeButton).clicked.connect(self.quit_)
        buttonBox.button(saveButton).clicked.connect(self.mergePdf)

        grid = QtWidgets.QGridLayout()

        grid.addWidget(background1Label, 1, 0, QtCore.Qt.AlignRight)
        grid.addWidget(textLabel, 2, 0, QtCore.Qt.AlignRight)

        grid.addWidget(self.background1Edit, 1, 1, 1, 4)
        grid.addWidget(self.textEdit, 2, 1, 1, 4)

        grid.addWidget(self.browseButton1, 1, 5)
        grid.addWidget(self.browseButton2, 2, 5)

        grid.addWidget(buttonBox, 4, 4, 1, 2, QtCore.Qt.AlignRight)

        grid.setColumnStretch(2, 1)

        self.setLayout(grid)

        self.resize(750, 132)
        self.setFixedHeight(132)
        self.center()
        self.setWindowTitle("Merge PDF")
        self.show()
        self.raise_()

    def center(self):
        qr = self.frameGeometry()
        cp = QtWidgets.QDesktopWidget().availableGeometry().center()
        cp.setY(250)
        qr.moveCenter(cp)
        self.move(qr.topLeft())

    def briefpapierPath(self):
        # Set background to default "lines of jasper briefpapier".
        if BRIEFPAPIER_PATH is not None and path.isfile(BRIEFPAPIER_PATH):
            return BRIEFPAPIER_PATH
        else:
            return ""

    def homepath(self):
        p = path.expanduser("~")
        p = path.join(p, "")
        return p

    def browseOpen(self, startp, sender):
        if sender == self.browseButton1:
            textEdit = self.background1Edit
        elif sender == self.browseButton2:
            textEdit = self.textEdit
        f = str(textEdit.text())
        dirname = path.dirname(f)
        if dirname != "":
            startp = dirname
        openFile = QtWidgets.QFileDialog.getOpenFileName(self, "Open file", startp, "*.pdf")[0]
        if not openFile:
            openFile = f
        textEdit.setText(openFile)
        return openFile

    def browseSave(self, startp):
        saveFile = QtWidgets.QFileDialog.getSaveFileName(self, "Save file", startp, "*.pdf")
        return saveFile

    def message(self, text="", infText="", icon="", buttons=""):
        message = QtWidgets.QMessageBox()
        if text:
            message.setText(text)
        if infText:
            message.setInformativeText(infText)
        if icon:
            message.setIcon(icon)
        if buttons:
            message.setStandardButtons(buttons)
        return message.exec_()

    def mergePdf(self):
        def filecheck(f, name, typ):
            warn = "info"
            ext = path.splitext(str(f))[-1].lower()
            critIcon = QtWidgets.QMessageBox.Critical
            if typ == "input":
                # Do checks for input files.
                if not f:
                    mText = "File error"
                    infText = "No %s file given." % name
                    icon = critIcon
                    self.message(mText, infText, icon)
                    warn = "error"
                elif not path.isfile(f):
                    # Check if input is an existing file, else give error.
                    mText = "File error"
                    infText = "The %s file does not exist." % name
                    icon = critIcon
                    self.message(mText, infText, icon)
                    warn = "error"
                elif ext != ".pdf":
                    # Check if input is a .pdf, else give error.
                    mText = "File error"
                    infText = "The %s file is not a .pdf." % name
                    icon = critIcon
                    self.message(mText, infText, icon)
                    warn = "error"
                elif PdfFileReader(open(f, "rb")).numPages < 1:
                    # Check if the input has at least one page.
                    # Don't know if it's possible for a pdf to have no pages,
                    # but just to be sure.
                    mText = "File error"
                    infText = "The %s file has no pages." % name
                    icon = critIcon
                    self.message(mText, infText, icon)
                    warn = "error"

            elif typ == "output":
                warn = "info"
                # Do checks for output file.
                txtFile = str(self.textEdit.text())
                if f:
                    # Check if an output file is set at all.
                    dirname = path.dirname(f)
                    basename = path.basename(f)
                    if dirname and basename:
                        # Check if it's a complete filename with path.
                        outputFile = f
                    elif not dirname and basename:
                        # Only filename > set dirname to text input dirname.
                        dirname = path.dirname(txtFile)
                        outputFile = path.join(dirname, basename)
                        warn = "warning"
                    elif dirname and not basename:
                        # Only dirname > set basename to text input basename + "_briefpapier".
                        basename = path.basename(txtFile)
                        base, ext = path.splitext(basename)
                        base = base + "_briefpapier"
                        basename = base + ext
                        outputFile = path.join(dirname, basename)
                        warn = "warning"
                elif not f:
                    # If f is empty, this means cancel was pressed in the
                    # file dialog.
                    warn = "cancel"
                return f, warn

                dirname = path.dirname(outputFile)
                basename = path.basename(outputFile)
                if not path.isdir(dirname):
                    # If dir is not valid, set it to dir of text input.
                    dirname = path.dirname(txtFile)
                    outputFile = path.join(dirname, basename)
                    warn = "warning"
                base, ext = path.splitext(outputFile)
                if ext.lower() != ".pdf":
                    # If the extension is not .pdf, set it to .pdf.
                    ext = ".pdf"
                    outputFile = base + ext
                    warn = "warning"
                f = outputFile
            return f, warn

        # Check and set all variables.
        # Set and check the background file.
        bgFile = str(self.background1Edit.text())
        bgFile, warn = filecheck(bgFile, "background", "input")
        if warn == "error":
            return
        else:
            background1 = PdfFileReader(open(bgFile, "rb"))
        # Set and check the text file.
        txtFile = str(self.textEdit.text())
        txtFile, warn = filecheck(txtFile, "text", "input")
        if warn == "error":
            return
        else:
            text = PdfFileReader(open(txtFile, "rb"))
        # Check and set output filename.
        startp = path.dirname(txtFile)
        basename = path.splitext(path.basename(txtFile))[0]
        startp = path.join(startp, basename + ".pdf")
        #outFile = str(self.browseSave(startp))
        outFile = self.browseSave(startp)[0]
        outFile, warn = filecheck(outFile, "output", "output")
        if warn == "cancel":
            return
        elif warn == "warning":
            infText = "The output filename was not (correctly) set.\n The file was saved as %s." % outFile
            icon = QtWidgets.QMessageBox.Warning
        elif warn == "info":
            infText = "The file was saved as %s." % outFile
            icon = QtWidgets.QMessageBox.Information
        # Check if input and output filename are not the same.
        if outFile == bgFile or outFile == txtFile:
            mText = "File error"
            infText = "The output file is the same as one of the input files."
            icon = QtWidgets.QMessageBox.Critical
            self.message(mText, infText, icon)
            return

        # Do actual pdf magic.
        # If the background pdf has 2 or more pages, add the first page as
        # the background to the first page of output and add the second page as
        # the background of the other pages of the output.
        app = QtWidgets.QApplication
        # waitcursor = QtWidgets.QCursor(QtCore.Qt.WaitCursor)
        app.setOverrideCursor(QtCore.Qt.WaitCursor)
        bgPage = background1.getPage(0)
        output = PdfFileWriter()
        for page in text.pages:
            bgPage.mergePage(page)
            output.addPage(bgPage)
            background1 = PdfFileReader(open(bgFile, "rb"))
            if background1.numPages == 1:
                bgPage = background1.getPage(0)
            elif background1.numPages >= 2:
                bgPage = background1.getPage(1)
        with open(outFile, 'wb') as outputStream:
            # outputStream = open(outFile, "wb")
            output.write(outputStream)
            # outputStream.close()
        app.restoreOverrideCursor()

        # Show a dialog to inform the user about the saved pdf.
        mText = "Saved merged pdf."
        self.message(mText, infText, icon)

    def quit_(self):

        self.close()


def main():
    app = QtWidgets.QApplication(sys.argv)
    window = mergePdfWin()
    window.show()
    sys.exit(app.exec_())
if __name__ == '__main__':
    main()
