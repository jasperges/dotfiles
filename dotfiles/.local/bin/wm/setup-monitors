#!/bin/bash

declare -a CONNECTED_MONITORS
declare -a MATCHING_LAYOUT_SCRIPTS

# Try to automatically run the screen layout script for the currently connected
# monitors

get_connected_monitors() {
    # Sometime there are some strange issues with the connected monitors. Both
    # the 'active' and 'connected' monitors can be reported incorrectly in my
    # case. By making sure a monitor is in both arrays, the result shoul now be
    # correct.
    local -a active_monitors
    local -a connected_monitors
    local monitor

    mapfile -t connected_monitors < <(xrandr -q | awk '/ connected/ {print $1}')
    mapfile -t active_monitors < <(xrandr --listactivemonitors | awk '{print $4}')

    for monitor in "${connected_monitors[@]}"; do
        # shellcheck disable=SC2076
        if [[ " ${active_monitors[*]} " =~ " ${monitor} " ]]; then
            CONNECTED_MONITORS+=("${monitor}")
        fi
    done
}

get_layout_scripts() {
    local -i match

    # If a connected monitor is set to off in the script, we assume this script
    # should not be used.
    mapfile -t scripts < <(find "${HOME}/.screenlayout" -name "*.sh")
    for script in "${scripts[@]}"; do
        match=0
        match=$(get_script_match "${script}")
        [[ ${match} -eq 1 ]] && MATCHING_LAYOUT_SCRIPTS+=("${script}")
    done
}

get_script_match() {
    local script
    local -a script_outputs

    script="$1"

    [[ -z ${script} ]] && return 1

    mapfile -t script_outputs < <(grep -o -E " *(.*(DP|LVDS)-[0-9-]+)\)" "${script}" | tr -d "[:blank:])")
    if [[ ${#script_outputs[@]} -ne ${#CONNECTED_MONITORS[@]} ]]; then
        echo 0
        return
    fi
    for monitor in "${CONNECTED_MONITORS[@]}"; do
        if ! grep " ${monitor})" "${script}" &> /dev/null; then
            echo 0
            return
        fi
    done
    echo 1
}

# ----------------------------------- main -----------------------------------

get_connected_monitors
get_layout_scripts
if [[ -z ${MATCHING_LAYOUT_SCRIPTS[*]} ]]; then
    notify-send "ðŸ–¥  Monitor Setup" "Could not find a matching layout script for the connected monitors."
    exit 0
fi
if [[ ${#MATCHING_LAYOUT_SCRIPTS[@]} -eq 1 ]]; then
    # Run script if there is only one matching script
    "${MATCHING_LAYOUT_SCRIPTS[0]}"
else
    # Assumes it's being run non-interactively for now, so exiting because we
    # can't get the users choice
    [[ -t 0 ]] && exit
    # TODO: also strip off the extension
    choice=$(printf "%s\n" "${MATCHING_LAYOUT_SCRIPTS[@]##*/}" | dmenu -l 5 -i -r)
    [[ -n ${choice} ]] && "${HOME}/.screenlayout/${choice}"
fi

# Make sure the background is displayed correctly, picom is still running and
# inputs are configured properly (peripherals can be connected to a monitor).
"${HOME}/.fehbg"
pgrep picom &> /dev/null || picom --daemon
setxinputs 2> /dev/null
