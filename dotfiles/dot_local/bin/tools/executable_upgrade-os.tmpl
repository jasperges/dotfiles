#!/bin/bash

{{ if eq .chezmoi.osRelease.id "fedora" -}}
package_manager_upgrade() {
    sudo dnf upgrade
}

{{ end -}}
{{ if eq .chezmoi.osRelease.id "ubuntu" -}}
package_manager_upgrade() {
    sudo apt update && sudo apt full-upgrade
}

{{ end -}}
flatpak_upgrade() {
    flatpak update
}

rustup_upgrade() {
    rustup self update && rustup update
}

cargo_upgrade() {
    cargo install-update --all
}

asdf_upgrade() {
    local _install_version
    local _global_version

    for lang in $(asdf list | grep -E "^[[:alpha:]]"); do
        case "${lang}" in
            "nodejs")
                asdf nodejs update-nodebuild
                _lts=$(asdf nodejs resolve lts --latest-available)
                _install_version="${_lts}"
                _global_version="${_lts}"
                ;;
            "haskell")
                _install_version="9.4-latest"
                _global_version="9.4-latest"
                ;;
            *)
                _install_version="latest"
                _global_version="latest"
                ;;
        esac
        asdf install "${lang}" "${_install_version}" \
            && asdf global "${lang}" "${_global_version}"
    done
}

pyenv_upgrade() {
    pyenv update
    # TODO: potentially check for a new python version, install it and set it
    #       to the default one
}


handle_ctrl_c() {
    echo "Caught Ctrl+C, aborting..."
    exit 1
}

main() {
    local _non_interactive=false
    local _has_errors=false

    trap 'handle_ctrl_c' SIGINT

    # Check for '--non-interactive' flag
    if [[ "$1" == "--non-interactive" ]]; then
        _non_interactive=true
    elif [[ "$1" != "" ]]; then
        echo "Unknown parameter: $1"
        echo "Usage: $0 [--non-interactive]"
        exit 1
    fi

    package_manager_upgrade || _has_errors=true
    flatpak_upgrade || _has_errors=true
    rustup_upgrade cargo-upgrade || _has_errors=true
    asdf_upgrade || _has_errors=true
    pyenv_upgrade || _has_errors=true
    if [[ ${_non_interactive} = true ]]; then
        echo
        read -n1 -s -r -p "Press any key to close this window..."
    fi
    if [[ ${_has_errors} = true ]]; then
        _error "There were errors during the upgrade process. Please check the output for more information."
        exitcode=1
    fi
    exitcode=0
}

main "$@"
