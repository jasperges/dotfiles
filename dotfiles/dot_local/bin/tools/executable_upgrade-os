#!/bin/bash

package_manager_upgrade() {
    if command -v dnf &> /dev/null; then
        sudo dnf upgrade --refresh
        return
    fi
    if command -v apt &> /dev/null; then
        sudo apt update && sudo apt full-upgrade
        return
    fi
}

flatpak_upgrade() {
    flatpak update
}

rustup_upgrade() {
    rustup self update && rustup update
}

cargo_upgrade() {
    cargo install-update --all
}

asdf_upgrade() {
    local lang
    local _current_version
    local _install_version
    local _lts

    for lang in $(asdf list | grep -E "^[[:alpha:]]"); do
        case "${lang}" in
            "gleam")
                # asdf latest gleam returns 'nightly' and we don't want that
                _install_version=$(asdf list all gleam | grep -Ev "(.*-rc[0-9]+|nightly)" | sort | tail -n1)
                ;;
            "haskell")
                _install_version="9.4-latest"
                ;;
            "nodejs")
                asdf cmd nodejs update-nodebuild
                _lts=$(asdf cmd nodejs resolve lts --latest-available)
                _install_version="${_lts}"
                ;;
            *)
                _install_version=$(asdf latest "${lang}")
                ;;
        esac
        _current_version=$(asdf current --no-header "${lang}" | awk '{print $2}')
        [[ ${_current_version} == "${_install_version}" ]] && continue
        asdf install "${lang}" "${_install_version}" \
            && asdf set --home "${lang}" "${_install_version}"
    done
}

pyenv_upgrade() {
    pyenv update
    # Install both Python 3.12 and the latest 3.x release and use the latest
    # 3.x release globally.
    pyenv install --skip-existing 3.12 3
    pyenv global 3
}

# shellcheck disable=SC2317
handle_ctrl_c() {
    echo "Caught Ctrl+C, aborting..."
    exit 1
}

main() {
    local _non_interactive=false
    local _has_errors=false
    local -i _exitcode=0

    trap 'handle_ctrl_c' SIGINT

    # Check for '--non-interactive' flag
    if [[ "$1" == "--non-interactive" ]]; then
        _non_interactive=true
    elif [[ "$1" != "" ]]; then
        echo "Unknown parameter: $1"
        echo "Usage: $0 [--non-interactive]"
        exit 1
    fi

    package_manager_upgrade || _has_errors=true
    flatpak_upgrade || _has_errors=true
    rustup_upgrade || _has_errors=true
    cargo_upgrade || _has_errors=true
    asdf_upgrade || _has_errors=true
    pyenv_upgrade || _has_errors=true
    if [[ ${_has_errors} = true ]]; then
        _error "There were errors during the upgrade process. Please check the output for more information."
        _exitcode=1
    fi
    if [[ ${_non_interactive} = true ]]; then
        echo
        read -n1 -s -r -p "Press any key to close this window..."
    fi
    exit ${_exitcode}
}

main "$@"
