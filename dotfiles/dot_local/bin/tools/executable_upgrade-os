#!/bin/bash

set -euo pipefail

# shellcheck disable=SC2317
_info_header() {
    local title="$1"
    local title_length=${#title}
    local total_padding=$(((72 - title_length) / 2))
    local left_padding=$total_padding
    local right_padding=$((total_padding + (72 - title_length) % 2))
    local padded_title
    padded_title=$(printf "%*s%s%*s" "${left_padding}" "" "${title}" "${right_padding}" "")

    _info "\n================================================================================"
    _info "=== ${padded_title} ==="
    _info "================================================================================\n"
}

# shellcheck disable=SC2317
package_manager_upgrade() {
    _info_header "DNF update"
    if command -v dnf &> /dev/null; then
        sudo dnf upgrade --refresh
        return
    fi
    if command -v apt &> /dev/null; then
        sudo apt update && sudo apt full-upgrade
        return
    fi
}

# shellcheck disable=SC2317
flatpak_upgrade() {
    _info_header "Flatpak update"
    flatpak update
}

# shellcheck disable=SC2317
rustup_upgrade() {
    _info_header "Rust update"
    rustup self update && rustup update
}

# shellcheck disable=SC2317
cargo_upgrade() {
    _info_header "Cargo update"
    cargo install-update --all
}

# shellcheck disable=SC2317
asdf_upgrade() {
    _info_header "ASDF update"
    local lang
    local _current_version
    local _install_version
    local _lts

    for lang in $(asdf list | grep -E "^[[:alpha:]]"); do
        case "${lang}" in
            "gleam")
                # asdf latest gleam returns 'nightly' and we don't want that
                _install_version=$(asdf list all gleam | grep -Ev "(.*-rc[0-9]+|nightly)" | sort | tail -n1)
                ;;
            "lua")
                _install_version="5.1"
                ;;
            # "nodejs")
            #     asdf cmd nodejs update-nodebuild
            #     _lts=$(asdf cmd nodejs resolve lts --latest-available)
            #     _install_version="${_lts}"
            #     ;;
            *)
                _install_version=$(asdf latest "${lang}")
                ;;
        esac
        _current_version=$(asdf current --no-header "${lang}" | awk '{print $2}')
        [[ ${_current_version} == "${_install_version}" ]] && continue
        asdf install "${lang}" "${_install_version}" \
            && asdf set --home "${lang}" "${_install_version}"
    done
}

# shellcheck disable=SC2317
handle_ctrl_c() {
    echo "Caught Ctrl+C, aborting..."
    exit 1
}

main() {
    local non_interactive=false
    local has_errors=false
    local -i exit_code=0
    local -r usage="Usage: $0 [--non-interactive]"

    local -r upgrade_functions=(
        "package_manager_upgrade"
        "flatpak_upgrade"
        "rustup_upgrade"
        "cargo_upgrade"
        "asdf_upgrade"
    )

    trap 'handle_ctrl_c' SIGINT

    # Check for '--non-interactive' flag
    while [[ $# -gt 0 ]]; do
        case "$1" in
            "--non-interactive")
                non_interactive=true
                shift
                ;;
            --)
                shift
                break
                ;;
            -*)
                echo "Unknown parameter: $1" >&2
                echo "${usage}" >&2
                exit 1
                ;;
            *)
                break
                ;;
        esac
    done

    for upgrade_function in "${upgrade_functions[@]}"; do
        "${upgrade_function}" || has_errors=true
    done

    if [[ ${has_errors} = true ]]; then
        _error "There were errors during the upgrade process. Please check the output for more information."
        exit_code=1
    fi
    if [[ ${non_interactive} == true ]]; then
        echo
        read -n1 -s -r -p "Press any key to close this window..."
    fi
    exit ${exit_code}
}

main "$@"
