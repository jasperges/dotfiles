#!/bin/bash

# ---------------------------------- globals ---------------------------------

# Settings
declare -a LIST_OF_WM_CLASSES_THAT_PREVENT_LOCKING=(
    "Pinentry-gtk-2" "Jitsi Meet" "zoom"
)
declare -a LIST_OF_WM_CLASSES_THAT_PREVENT_LOCKING_FULLSCREEN=(
    "mpv" "Wine" "vlc" "Pinentry-gtk-2" "Firefox" "firefox" "Navigator" "Google-chrome" "Slack"
)
declare -a LIST_OF_WINDOW_TITLES_THAT_PREVENT_LOCKING_FULLSCREEN=(
    "NPO" "YouTube" "Netflix" "Prime Video" "Jitsi Meet" "HBO Max"
)

declare -a LOCK_IMAGES

declare -i FORCE
FORCE=0
[[ $1 == "--force" ]] && FORCE=1

# --------------------------------- functions --------------------------------

# Find active window id
get_active_id() {
    xprop -root | awk '$1 ~ /_NET_ACTIVE_WINDOW/ { print $5 }'
}

# Find active window WM_CLASS
get_wm_class() {
    xprop -id "$1" | awk -F '=' '$1 ~ /WM_CLASS\(STRING\)/ { print $2 }' | cut -d "," -f 2 | tr -d '[:space:]'
}

# Determine a window's title text by it's ID
get_window_title() {
    # For mplayer or vlc, we might need to check WM_CLASS(STRING), idk.
    xprop -id "$1" | awk -F '=' '$1 ~ /_NET_WM_NAME\(UTF8_STRING\)/ { print $2 }'
}

# Determine if a window is fullscreen based on it's ID
is_fullscreen() {
    xprop -id "$1" | awk -F '=' '$1 ~ /_NET_WM_STATE\(ATOM\)/ { if ($2 ~ /STATE_FULLSCREEN/) exit 0; exit 1 }'
}

# Determine if the locker command should run based on which windows are fullscreened.
should_lock() {
    # Don't lock if 'i3lock' is already running
    pgrep i3lock && return 1

    # If '--force' is used we should always lock
    [[ ${FORCE} -eq 1 ]] && return 0

    id=$(get_active_id)
    wmclass=$(get_wm_class "$id")
    title=$(get_window_title "$id")

    if is_fullscreen "$id"; then
        for i in "${LIST_OF_WM_CLASSES_THAT_PREVENT_LOCKING_FULLSCREEN[@]}"; do
            if [[ $wmclass =~ $i ]]; then
                return 1
            fi
        done
        for i in "${LIST_OF_WINDOW_TITLES_THAT_PREVENT_LOCKING_FULLSCREEN[@]}"; do
            if [[ $title =~ $i ]]; then
                return 1
            fi
        done
    fi
    for i in "${LIST_OF_WM_CLASSES_THAT_PREVENT_LOCKING[@]}"; do
        if [[ $wmclass =~ $i ]]; then
            return 1
        fi
    done

    return 0
}

# Create one big image spanning all monitors
create_monitor_spanning_image() {
    lock_image="$1"
    monitors_size_pos=$(xrandr --listactivemonitors | awk -F ' ' '/^\s[[:digit:]]:\s/ {print $3}' \
        | sed -nE "s|^([[:digit:]]+)/[[:digit:]]+x([[:digit:]]+)/[[:digit:]]+\+([[:digit:]]+)\+([[:digit:]]+)|\1x\2+\3+\4|p")
    while IFS= read -r line; do
        x=$(echo "$line" | cut -dx -f1)
        # y=$(echo "$line" | cut -dx -f2 | cut -d+ -f1)
        offset_x=$(echo "$line" | cut -d+ -f2)
        offset_y=$(echo "$line" | cut -d+ -f3)
        random_string=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 8)
        image="/tmp/lock_image_$random_string-$offset_x-$offset_y.png"
        convert -geometry "${x}x" "$lock_image" "$image"
        LOCK_IMAGES+=("$image")
    done <<< "$monitors_size_pos"

    # Construct the convert command
    convert_command="convert"
    for image in "${LOCK_IMAGES[@]}"; do
        filename="${image%.png}"
        offset=$(echo "$filename" | awk -F '-' '{print "+"$2"+"$3}')
        convert_command+=" -page $offset $image"
    done

    convert_command+=" -background gray10 -layers merge \"$2\""

    # Run the convert command
    eval "$convert_command"

    # Remove temporary images
    for image in "${LOCK_IMAGES[@]}"; do
        rm "$image"
    done
}

lock_cmd() {
    i3lock --ignore-empty-password --show-failed-attempts --tiling --nofork --image "$1"
}
{{ if .kbdBacklight }}
turn_off_keyboardbacklight() {
    [[ ! -f /sys/class/leds/{{- .kbdBacklight -}}::kbd_backlight/brightness ]] && return
    # Use this to restore the last value when the screen is unlocked again
    cp /sys/class/leds/{{- .kbdBacklight -}}::kbd_backlight/brightness "$HOME/.last_keyboard_backlight"
    # Turn off keyboard backlight
    echo 0 > /sys/class/leds/{{- .kbdBacklight -}}::kbd_backlight/brightness
}

turn_on_keyboardbacklight() {
    [[ ! -f "/sys/class/leds/{{- .kbdBacklight -}}::kbd_backlight/brightness" ]] && return
    [[ ! -f "$HOME/.last_keyboard_backlight" ]] && return
    # Restore last used backlight values
    backlight_keyboard=$(< "$HOME/.last_keyboard_backlight")
    # Turn on the backlight slighty if it's (almost) off.
    ((backlight_keyboard < 12)) && backlight_keyboard=12
    echo $backlight_keyboard > /sys/class/leds/{{- .kbdBacklight -}}::kbd_backlight/brightness
}
{{ end }}
lock() {
    local -a connected_monitors

    if should_lock; then
        # Turn off keyboard backlight
        turn_off_keyboardbacklight
        # pause dunst
        dunstctl set-paused true

        lock_image="$(find "$HOME"/[Pp]ictures/backgrounds/lock -maxdepth 1 -iname '*.png' -type f | shuf -n 1)"
        # Check for multi-monitor setup
        # TODO: Only create 1 image if resolutions of monitors differ
        mapfile -t connected_monitors < <(xrandr -q | awk '/ connected/ {print $1" "$3" "$4}')
        if [[ ${#connected_monitors[@]} -gt 1 ]]; then
            cache_dir="${XDG_CACHE_HOME:-$HOME/.cache}/jasperge-locker"
            lock_image_basename="$(sha256sum -b "$lock_image" | awk '{printf $1}')"
            [[ ! -d "$cache_dir" ]] && mkdir -p "$cache_dir"
            desktop_lock_image="$cache_dir/$lock_image_basename-$(xdpyinfo | awk '/dimensions/ {printf $2}').png"
            # Check if cached image already exists
            [[ ! -f "$desktop_lock_image" ]] \
                && create_monitor_spanning_image "$lock_image" "$desktop_lock_image" \
                || echo "Using cached image..."
            lock_image="$desktop_lock_image"
        fi
        lock_cmd "$lock_image"
        sleep 1
        # resume dunst
        dunstctl set-paused false
        # Turn on keyboard backlight
        turn_on_keyboardbacklight
    fi
}

# ----------------------------------- main -----------------------------------

lock "${FORCE}"
